[project]
name = "physixed"
version ="0.1.0"

[tool.black]
target-version = ["py311"]

[tool.ruff]
target-version = "py311"
line-length = 120
fix = true
lint.select = ["ALL"]
lint.ignore = [
    "ANN101", # Missing type annotation for `self` in method
    "ANN002", # Missing type annotation for `*args`
    "ANN003", # Missing type annotation for `**kwargs`
    "ANN204", # Missing return type annotation for special method `__init__`

    "D100", # Missing docstring in public module
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D107", # Missing docstring in __init__
    "D202", # No blank lines allowed after function docstring (found{num_lines})
    "D203", # 1 blank line required before class docstring
    "D204", # 1 blank line required after class docstring
    "D212", # Multi-line docstring summary shoudl start at the first line
    "D213", # Multi-line docstring summary shoudl start at the second line
    "D402", # First line should not be the function's signature
    "D405", # Section name should be properly capitalized ("{name}")
    "D407", # Missing dashed underline after section ("{name}")
    "D415", # First line should end with a period, question mark, or exclamation point
    "D416", # Section name should end with a colon ("{name}")

    "ERA001", # Found commented-out code

    "FBT001", # Boolean-typed positional argument in function definition
    "FBT002", # Boolean default positional argument in function definition

    "S101",   # Use of assert detected

    "TID252", # we do need relative imports for the unit tests

    "PLR2004", # magic-value-comparison

    "COM812", # missing trailing comma

    "TCH001", # Move application import {} into a type-checking block
    "TCH002", # Move third-party import {} into a type-checking block
    "TCH003", # Move standard library import {} into a type-checking block

    "SLF001", # private-member-access

    "EM101", # Exception must not use a string literal, assign to variable first
    "EM102", # Exception must not use an f-string literal, assign to variable first


    "TD002", # Missing author in TODO
    "TD003", # Missing issue link on the line following this TODO
    "FIX002", # line-contains-todo

    "TRY003", # Avoid specifying long messages outside the exception class

    "PLR0913", # too-many-arguments


]

exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "__pypackages__",
    #"**/*test_*.py",
    "**/migrations/**"
]

# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 20
max-statements = 100

[tool.ruff.lint.isort]
known-local-folder = ["backend"]


[tool.poetry]
name = "physixed"
version = "0.1.0"
description = ""
authors = ["R4vante <l.teegelbeckers@hotmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
coverage = "^7.6.1"
Django = "^5.0.7"
django-debug-toolbar = "^4.4.2"
djlint = "^1.34.1"
numpy = "^2.0.1"
plotly = "^5.23.0"
matplotlib = "^3.8.4"
pre-commit = "^3.8.0"
pytest = "^8.3.2"
pytest-cov = "^5.0.0"
pytest-django = "^4.8.0"
pytest-env = "^1.1.3"
pytest-random-order = "^1.1.1"
python-dotenv = "^1.0.1"
ruff = "^0.5.6"
scipy = "^1.14.0"
tqdm = "^4.66.3"
djangorestframework = "^3.15.2"
django-cors-headers = "^4.4.0"
pint = "^0.24"
resend = "^2.3.0"
setuptools = "^72.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]
version = "0.1.0"
version_files = [
    "pyproject.toml:^version"
]
tag_format = "$major.$minor.$patch"
changelog_incremental = true
update_changelog_on_bump = false
